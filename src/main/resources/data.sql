-- Отключаем проверку внешних ключей для безопасной очистки
SET REFERENTIAL_INTEGRITY FALSE;

-- Очищаем таблицы в правильном порядке (от дочерних к родительским)
TRUNCATE TABLE friends;
TRUNCATE TABLE likes;
TRUNCATE TABLE film_genres;
TRUNCATE TABLE films;
TRUNCATE TABLE users;
TRUNCATE TABLE genres;
TRUNCATE TABLE mpa_ratings;

-- Включаем проверку внешних ключей обратно
SET REFERENTIAL_INTEGRITY TRUE;

-- Таблица рейтингов MPA
CREATE TABLE IF NOT EXISTS mpa_ratings (
                                           mpa_rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                           name VARCHAR(50) NOT NULL UNIQUE
    );

-- Таблица жанров
CREATE TABLE IF NOT EXISTS genres (
                                      genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                      name VARCHAR(50) NOT NULL UNIQUE
    );

-- Таблица пользователей
CREATE TABLE IF NOT EXISTS users (
                                     user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                     email VARCHAR(255) NOT NULL UNIQUE,
    login VARCHAR(255) NOT NULL UNIQUE,
    name VARCHAR(255),
    birthday DATE,
    CONSTRAINT email_not_empty CHECK (email <> ''),
    CONSTRAINT login_not_empty CHECK (login <> ''),
    CONSTRAINT valid_birthday CHECK (birthday <= CURRENT_DATE)
    );

-- Таблица фильмов
CREATE TABLE IF NOT EXISTS films (
                                     film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                     title VARCHAR(255) NOT NULL,
    description VARCHAR(200),
    release_date DATE NOT NULL,
    duration INTEGER NOT NULL,
    mpa_rating_id INTEGER NOT NULL,
    CONSTRAINT title_not_empty CHECK (title <> ''),
    CONSTRAINT positive_duration CHECK (duration > 0),
    CONSTRAINT valid_release_date CHECK (release_date >= DATE '1895-12-28'),
    FOREIGN KEY (mpa_rating_id) REFERENCES mpa_ratings (mpa_rating_id)
    );

-- Связь фильмов и жанров (многие-ко-многим)
CREATE TABLE IF NOT EXISTS film_genres (
                                           film_id INTEGER NOT NULL,
                                           genre_id INTEGER NOT NULL,
                                           PRIMARY KEY (film_id, genre_id),
    FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES genres (genre_id) ON DELETE CASCADE
    );

-- Таблица лайков
CREATE TABLE IF NOT EXISTS likes (
                                     film_id INTEGER NOT NULL,
                                     user_id INTEGER NOT NULL,
                                     PRIMARY KEY (film_id, user_id),
    FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
    );

-- Таблица друзей (односторонняя дружба)
CREATE TABLE IF NOT EXISTS friends (
                                       user_id INTEGER NOT NULL,
                                       friend_id INTEGER NOT NULL,
                                       status VARCHAR(20) DEFAULT 'UNCONFIRMED',
    PRIMARY KEY (user_id, friend_id),
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    FOREIGN KEY (friend_id) REFERENCES users (user_id) ON DELETE CASCADE,
    CONSTRAINT no_self_friendship CHECK (user_id <> friend_id)
    );

-- Предзаполнение справочных данных
MERGE INTO mpa_ratings (mpa_rating_id, name) KEY (mpa_rating_id) VALUES
    (1, 'G'), (2, 'PG'), (3, 'PG-13'), (4, 'R'), (5, 'NC-17');

MERGE INTO genres (genre_id, name) KEY (genre_id) VALUES
    (1, 'Комедия'), (2, 'Драма'), (3, 'Мультфильм'),
    (4, 'Триллер'), (5, 'Документальный'), (6, 'Боевик');